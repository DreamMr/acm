题目描述：
求一棵二叉树的前序遍历，中序遍历和后序遍历
输入描述：
第一行一个整数n，表示这棵树的节点个数。
接下来n行每行2个整数L和R。第i行的两个整数Li和Ri代表编号为i的节点的左儿子编号和右儿子编号。
输出描述：
输出一共三行，分别为前序遍历，中序遍历和后序遍历。编号之间用空格隔开。
样例：
input：


5

2 3

4 5

0 0

0 0

0 0

output：
1 2 4 5 3
4 2 5 1 3
4 5 2 3 1

n<=16

code:
#include<iostream>
#include<stdio.h>
using namespace std;

struct node
{
    int lc;
    int rc;
};
node a[17];
void build(int n)
{

    for(int i=1;i<=n;i++)
    {
        int x=0,y=0;
        scanf("%d%d",&x,&y);
        a[i].lc=x;
        a[i].rc=y;
    }
}
void pre(int i)
{
    //if(!a[i]){return;}
    cout<<i<<" ";
    if(a[i].lc)
    pre(a[i].lc);
    if(a[i].rc)
    pre(a[i].rc);
}
void in(int i)
{
    //if(!a[i]){return;}
    if(a[i].lc)
    in(a[i].lc);
    cout<<i<<" ";
    if(a[i].rc)
    in(a[i].rc);
}
void post(int i)
{
//if(!a[i]){return;}
    if(a[i].lc)
    post(a[i].lc);
    if(a[i].rc)
    post(a[i].rc);
    cout<<i<<" ";
}
int main()
{
    int n=0;
    cin>>n;
    build(n);
    pre(1);
    cout<<endl;
    in(1);
    cout<<endl;
    post(1);
    cout<<endl;
    return 0;
}
