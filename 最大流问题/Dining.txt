问题描述：有N头牛准备了F种食物和D种饮料每头牛都有各自喜欢的食物和饮料，而每种食物或饮料只能分配给一头牛。最多能有多少头牛可以同时得到喜欢的食物和饮料？
思路：可以利用最大流算法。
s->DRINK->COW->COW->FOOD->T
code：
#include<vector>
#include<iostream>
#include<string.h>
#include<algorithm>
using namespace std;
#define INF 0xfffffff
struct edge
{
    int rev;
    int to;
    int cap;
};
vector<edge>v[2*100+100+100+2];
void add_edge(int from,int to,int cap)
{
    edge tmp;tmp.cap=1;tmp.to=to;tmp.rev=v[to].size();
    v[from].push_back(tmp);
    tmp.cap=0;tmp.rev=v[from].size()-1;tmp.to=from;
    v[to].push_back(tmp);
}
bool used[2*100+200+2];
int dfs(int s,int t,int f)
{
    if(s==t){return f;}
    used[s]=1;
    for(int i=0;i<v[s].size();i++)
    {
        edge &tmp=v[s][i];
        if(!used[tmp.to]&& tmp.cap>0)
        {
            int temp=dfs(tmp.to,t,min(f,tmp.cap));
            if(temp>0)
            {
                v[tmp.to][tmp.rev].cap+=temp;
                tmp.cap-=temp;
                return temp;
            }
        }
    }
    return 0;
}
int solve(int s,int t)
{
    int max_flow=0;
    while(1)
    {
        memset(used,0,sizeof(used));
        int temp=dfs(s,t,INF);
        if(temp==0)return max_flow;
        max_flow+=temp;
    }
}
int main()
{
    int n=0,f=0,d=0;
    cin>>n>>f>>d;
    int i=0;
    for(;i<=n-1;i++)
    {
        add_edge(i,i+n,1);
        int tmp_f=0,tmp_d=0;
        cin>>tmp_f>>tmp_d;
        for(int j=0;j<tmp_f;j++)
        {
            int x=0;
            cin>>x;
            add_edge(i+n,x-1+2*n+d,1);
        }
        for(int j=0;j<tmp_d;j++)
        {
            int x=0;
            cin>>x;
            add_edge(x-1+2*n,i,1);
        }
    }
    int s=2*n+f+d;
    int t=s+1;
    i=2*n;
    for(;i<=2*n+d-1;i++)
    {
        add_edge(s,i,1);
    }
    for(;i<=2*n+f+d-1;i++)
    {
        add_edge(i,t,1);
    }
    cout<<solve(s,t)<<endl;
    return 0;
}
